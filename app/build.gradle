plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildToolsVersion

    defaultConfig {
        applicationId "co.movie.app"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.compileSdk
        versionCode versions.versionCode
        versionName versions.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation":
                                      "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildTypes.each { type ->
        type.buildConfigField 'String', 'BASE_URL', '"https://api.themoviedb.org/3/"'
        type.buildConfigField 'String', 'API_KEY', '"536bb37eb9549e2b6c7d4f7e5466ef66"'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += [
                "-Xallow-jvm-ir-dependencies",
                "-Xskip-prerelease-check"]
        useIR = true
    }

    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
        test.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }

    buildFeatures {
        viewBinding true
    }
}

kapt {
    correctErrorTypes = true
}

dependencies {
    // app compat
    implementation "androidx.appcompat:appcompat:$versions.appcompat"

    // material
    implementation "androidx.constraintlayout:constraintlayout:$versions.constraintLayout"
    implementation "com.google.android.material:material:$versions.materialVersion"

    // androidx
    implementation "androidx.core:core-ktx:$versions.coreKtx"

    // mavericks
    implementation "com.airbnb.android:mavericks:$versions.mavericks"

    // architecture components
    implementation "androidx.fragment:fragment-ktx:$versions.fragmentVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$versions.lifecycleExtensionVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$versions.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycleVersion"

    // hilt
    implementation "com.google.dagger:hilt-android:$versions.hiltCoreVersion"
    implementation "androidx.hilt:hilt-common:$versions.hiltVersion"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$versions.hiltVersion"
    kapt "com.google.dagger:hilt-compiler:$versions.hiltCoreVersion"
    kapt "androidx.hilt:hilt-compiler:$versions.hiltVersion"

    // network
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttpVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$versions.retrofitConverter"
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofitVersion"

    // coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutinesVersion"

    // navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$versions.navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$versions.navigation"

    // epoxy
    implementation "com.airbnb.android:epoxy:$versions.epoxy"
    kapt "com.airbnb.android:epoxy-processor:$versions.epoxy"

    // ui
    implementation "io.coil-kt:coil:$versions.coil"
    implementation "com.airbnb.android:lottie:$versions.lottie"

    // room database
    implementation "androidx.room:room-runtime:$versions.roomVersion"
    implementation "androidx.room:room-ktx:$versions.roomVersion"
    kapt "androidx.room:room-compiler:$versions.roomVersion"

    // multidex
    implementation "androidx.multidex:multidex:$versions.multidex"
}